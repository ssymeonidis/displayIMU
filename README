      _ _           _             _____ __  __ _    _ 
     | (_)         | |           |_   _|  \/  | |  | |
   __| |_ ___ _ __ | | __ _ _   _  | | | \  / | |  | |
  / _` | / __| '_ \| |/ _` | | | | | | | |\/| | |  | |
 | (_| | \__ \ |_) | | (_| | |_| |_| |_| |  | | |__| |
  \__,_|_|___/ .__/|_|\__,_|\__, |_____|_|  |_|\____/ 
             | |             __/ |                    
             |_|            |___/                     


The displayIMU project provides an Inertial Measurement Unit (IMU) that takes
in gyroscope, accelerometer, and magnetoeter data and estimates an orientation,
i.e. where the system is pointed.  Also available is an acceleration estimate
minus gravity.  Orientation is represeted as a quaternion, but math utilities
are provided to convert that state into Euler angles along with applying a user
specified reference.  The "core" IMU codebase is written in C and is configured
to create a shared object file that can be statically or dynamically linked into
another application.

Also provided is a QT application that provides the tools to diplay IMU data,
read/write calibration/configuration files, and stream live raw data via UPD or 
stored raw data from a CSV file.  The "display" IMU codebase is written C++.
qtcreator was used to create the GUI and is recommended for future changes.  For
offline processing, there is an program for parsing and generating csv files,
which can be found in the csv directory.

To compile the project in Linux perform the following in the root directory:
- source setenv.sh
- make 

If changes are made to the GUI, running qmake may be necessary.  This cand be
done by performing the following:
- cd display
- make clean
- qmake
- make
- cd ..

The IMU shared object and display binary are created in bin.  To run type:
- cd bin
- ./displayIMU

The project organization is as follows
- bin <- stores libIMU.so library and displayIMU executable
- common <- stores shared c/c++ and header files 
- config <- stores json configuration and calibration files
- display <- source code for QT diplay application
- doc <- support documentation 
- imu <- source code for IMU library
- test <- unit test source (regression testing)

The IMU library is broken down into smaller components to provide flexibility on
how the code is integrated into a project.  For example, the correction function
which applies calibration factors to raw data can be colocated with the sensors
and whereas the core functions can be placed in the main application.  The files
along with their descriptions are captured below:
- IMU_engn <- functions that manage the overall IMU system (top-level I/F) 
- IMU_core <- functions that fuse corrected sensor data (generate estimates) 
- IMU_rect <- functions that applies calibarion factors to raw data
- IMU_pnts <- functions that extracts points for multi-point calibrations
- IMU_auto <- functions that generates calibration data continously
- IMU_calb <- functions that generates correct structures from pnts/auto
- IMU_file <- functions for reading/writting structs to json files 
- IMU_math <- functions for converting/orienting quaternion IMU states
- IMU_thrd <- functions for managing critical sections of code (mutex)
- IMU_type <- type definitions for sensor data and figure of merits

Note: QT may generate an "Attempt to set a screen on a child window" message
from QWindowPrivate::setTopLevelScreen.  According to stackoverlflow, question
33545006, 'Qt5 "Attempt to set a screen on a child window" many runtime warning
messages', this occurs whenvever setMinumumWidth() or setMiniumumHeight() are
called on a QGLWidget under Linux with a dual screen display.  This is likely a
bug in Qt and will not be fixed because documentation recommened to use the new
QOpenGLWidget instead.  This is a significant change to the OpenGL interface
and there is no significant benefits to pursue this.
